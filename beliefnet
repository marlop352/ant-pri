/************************************************************************
Belief Network Inference - Brute Force Method

Given a polytree (only one path between any two nodes) belief network, the
procedure 'assert_jpd' computes and asserts the joint probability
distribution for the nodes of the network.  The procedure
'condition_probability(Variable,Evidence,P)' can then be used to compute
the conditional probability P of Variable being true given Evidence.  The
Evidence variable is of the form [Variable/Value,...], where Variable is a
node in the network known to be equal to Value (true or false).

Belief networks are defined using 'belief_net_parents(Node,Parents)' and
'belief_net_node(Node,ConditionalProbabilityTable)', one of each for every
node in the network.  The Node argument is any valid Prolog atom.  The
Parents argument is a list of Nodes, or [] for nodes with no parents.  The
CPT argument is a list of the form:

  [ [ValParent1,...,ValParentN], Pt, Pf], ... ]

where [ValParent1,...,ValParentN] are the values (true or false) of the
parents of the node in the same order as specified in the corresponding
belief_net_parents definition.  Pt (Pf) is the probability that the node is
true (false) given these parent values.  There should be a [Values,Pt,Pf]
entry in the CPT for each possible set of parent values.  See the end of
this file for sample definitions of the belief network in Figure 15.2 of
Russell and Norvig.

This is called the brute force method, because the entire joint probability
distribution is computed (size exponential in number of variables), instead
of the more efficient algorithm used in the Belief-Net-Ask function in
Figure 15.8 of Russell and Norvig.

In summary, to use this code:
  (1) Use belief_net_parents and belief_net_node to define belief network.
  (2) Use assert_jpd to compute and assert joint probability distribution.
  (3) Use conditional_probability to compute any conditional probabilities.

*************************************************************************/


% assert_jpd: Delete any old joint probability distribution and generate
%   and assert new one based on currently defined belief network.

assert_jpd :-
  retractall(joint_prob_distrib(_)),
  generate_jpd(JPD),
  assert(joint_prob_distrib(JPD)).


% generate_jpd(JPD): Looks up all the currently defined belief network nodes,
%   finds all combinations of boolean assignments to these nodes, and computes
%   the joint probability distributions entries for these assignments.

generate_jpd(JPD) :-
  findall(N,belief_net_node(N,_),Nodes),
  findall(NodeTruthValues,truth_values(Nodes,NodeTruthValues),NTVList),
  get_jpd_entries(NTVList,JPD).


% truth_values(Nodes,NodeTruthValues): True if NodeTruthValues is a
%   possible assignment of truth values to Nodes.  For example:
%
%     truth_values([a,b],[[a/true,b/true],[a/true,b/false],
%                         [a/false,b/true],[a/false,b/false]])

truth_values([],[]).

truth_values([Node|Nodes],[Node/false | NTVals]) :-
  truth_values(Nodes,NTVals).

truth_values([Node|Nodes],[Node/true | NTVals]) :-
  truth_values(Nodes,NTVals).


% get_jpd_entries(NTVlist,JPD): Computes the probabilities of each assignment
%   of node truth values in NTVList and returns the resulting joint
%   probability distribution in JPD.

get_jpd_entries([],[]).

get_jpd_entries([NTVals|NTVRest],[[NTVals,P]|JPDRest]) :-
  compute_probability(NTVals,NTVals,P),
  get_jpd_entries(NTVRest,JPDRest).


% compute_probability(Nodes,NTVals,P): Computes the probability of the
%   given assignment of node values in Nodes by computing the product of
%   each conditional probability of the parents according to the node's
%   conditional probability table (CPT).

compute_probability([],_,1.0).

compute_probability([Node/Value | Nodes], NTVals, P) :-
  belief_net_parents(Node,Parents),
  lookup_truth_values(Parents,NTVals,PTVals),
  belief_net_node(Node,CPT),
  member([PTVals,Pt,Pf],CPT),
  probability(Value,[Pt,Pf],NP),
  compute_probability(Nodes,NTVals,RP),
  P is NP * RP.


% lookup_truth_values(Nodes,NTVals,Vals):  Vals is the list of truth values
%   (true or false) of Nodes in NTVals.  For example:
%
%   l_t_v([b,c],[a/true,b/false,c/true,d/false],[false,true])

lookup_truth_values([],_,[]).

lookup_truth_values([Node|Nodes],NTVals,[Val|Vals]) :-
  member(Node/Val,NTVals),
  lookup_truth_values(Nodes,NTVals,Vals).


% probability(Value,PD,P): P is the probability of Value (true or false)
%   according to the boolean probability distribution PD. 

probability(true,[Pt,_],Pt).

probability(false,[_,Pf],Pf).


% conditional_probability(Variable,Evidence,CP): CP is the conditional
%   probability of Variable given Evidence.  Evidence is a list of entries
%   of the form Node/Value, where Value is either true or false.  Evidence
%   can be the empty list.  The joint probability distribution must have
%   asserted using 'assert_jpd' for this procedure to work.

conditional_probability(Variable,Evidence,CP) :-
  joint_probability([Variable/true | Evidence],JP1),
  joint_probability(Evidence,JP2),
  CP is JP1 / JP2.


% joint_probability(Variables,JP): JP is the joint probability of
%   Variables, i.e., JP = Prob(V1/Val1 and V2/Val2 and ...).

joint_probability([],1.0) :- !.

joint_probability(Variables,JP) :-
  joint_prob_distrib(JPD),
  sum_entries(Variables,JPD,JP).


% sum_entries(Variables,JPD,Sum): Adds together the probability entries in
%   the joint probability distribution JPD whose values are consistent with
%   those in Variables.

sum_entries(_,[],0.0).

sum_entries(Variables,[[TruthValues,P]|JPDRest],Sum) :-
  subset(Variables,TruthValues),
  !,
  sum_entries(Variables,JPDRest,SumRest),
  Sum is P + SumRest.

sum_entries(Variables,[_|JPDRest],Sum) :-
  sum_entries(Variables,JPDRest,Sum).


% subset(L1,L2): True if L1 is a subset of L2.

subset([],_).

subset([H|T],L) :-
  member(H,L),
  subset(T,L).


% member(X,L): True is X is a member of list L.

member(X,[X|_]).

member(X,[_|T]) :-
  member(X,T).


%-----------------------------------------------------------------------
% Belief Network from Figure 15.2, Russell and Norvig

/*
belief_net_parents(burglary,[]).
belief_net_parents(earthquake,[]).
belief_net_parents(alarm,[burglary,earthquake]).
belief_net_parents(johncalls,[alarm]).
belief_net_parents(marycalls,[alarm]).

belief_net_node(burglary,[[[],0.001,0.999]]).
belief_net_node(earthquake,[[[],0.002,0.998]]).
belief_net_node(alarm,
  [[[true,true],0.95,0.05],
   [[true,false],0.94,0.06],
   [[false,true],0.29,0.71],
   [[false,false],0.001,0.999]]).
belief_net_node(johncalls,
  [[[true],0.90,0.10],
   [[false],0.05,0.95]]).
belief_net_node(marycalls,
  [[[true],0.70,0.30],
   [[false],0.01,0.99]]).
*/
